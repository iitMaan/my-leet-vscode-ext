function formatName(str)

function getLanguage(filePath)

async function getTests(url)
    make files for input and outputs
    each different for different test case

class myWebviewViewProvider
    shows the result

async function activate(context)
    main function that run the extension
    get test cases

	const runCases = vscode.commands.registerCommand('cph-lc.RunTestCases',async function (){
		const workspaceFolders = vscode.workspace.workspaceFolders;
		if (!workspaceFolders) {
			vscode.window.showErrorMessage('No folder or workspace is open.');
			return;
		}
				
		const editor = vscode.window.activeTextEditor;
			
		if (!editor) {
			vscode.window.showErrorMessage('No active editor found! Open your solution file.');
			return;
		}
						
		const userCode = editor.document.getText(); // Fetch code from the open editor
						
		if (!userCode || userCode.trim() === '') {
			vscode.window.showErrorMessage('Solution code is empty!');
			return;
		}

		// Path to the problem-specific folder
		let problemName = await vscode.window.showInputBox({
			prompt: "Enter the problem name"
		});
						
		if (!problemName) {
			vscode.window.showErrorMessage('Problem name is required!');
			return 0;
		}
					
		problemName = formatName(problemName);
		let problemFolderPath;

		let flag = 0;
		for(let folder of workspaceFolders){
			const workspaceFolderPath = folder.uri.fsPath;
        	const testDataFolderPath = path.join(workspaceFolderPath, 'TestData');
			if(!fs.existsSync(testDataFolderPath))continue;

			flag = 1;

			problemFolderPath = path.join(testDataFolderPath, problemName);

			if (!fs.existsSync(problemFolderPath)) {
				vscode.window.showErrorMessage(`The folder '${problemName}' does not exist inside 'TestData'.`);
				return;
			}
			else{
				flag = 2;
				console.log("Found!");
				break;
			}
		};

		if(flag == 0){
			vscode.window.showErrorMessage(`'TestData' folder not found`);
			return;
		}

		assert(flag == 2);

		let filePath = editor.document.uri.fsPath;
		const lang = getLanguage(filePath);

		if(lang == 'cpp'){
			const userSolutionFile = path.join(problemFolderPath, 'temp_solution.cpp');
			const executableFile = path.join(problemFolderPath, 'solution_exec.exe');
			
			fs.writeFileSync(userSolutionFile, userCode, 'utf8');

			await runCodeCpp(userSolutionFile,executableFile,problemFolderPath);
		}
		else{
			await runCodePython(filePath,problemFolderPath);
		}
	})

	const object = new myWebviewViewProvider(context);
	context.subscriptions.push(
	  vscode.window.registerWebviewViewProvider('explorerView', object)
	);

	context.subscriptions.push(getCases,runCases);
}

// This method is called when your extension is deactivated
function deactivate() {}

module.exports = {activate,deactivate};